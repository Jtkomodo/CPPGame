; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28315.0 

	TITLE	D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\BatchedModel.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__DC53372E_BatchedModel@h DB 01H
__7B659B23_BatchedModel@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??0BatchedModel@@QAE@XZ				; BatchedModel::BatchedModel
PUBLIC	?Draw@BatchedModel@@QAEXXZ			; BatchedModel::Draw
PUBLIC	?addValuesToVBO@BatchedModel@@QAEXQAM0@Z	; BatchedModel::addValuesToVBO
PUBLIC	?flushBuffers@BatchedModel@@QAEXXZ		; BatchedModel::flushBuffers
PUBLIC	__JustMyCode_Default
EXTRN	__imp__glDrawElements@16:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___glewBindBuffer:DWORD
EXTRN	___glewBufferData:DWORD
EXTRN	___glewBufferSubData:DWORD
EXTRN	___glewGenBuffers:DWORD
EXTRN	___glewEnableVertexAttribArray:DWORD
EXTRN	___glewVertexAttribPointer:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\BatchedModel.cpp
;	COMDAT ?flushBuffers@BatchedModel@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?flushBuffers@BatchedModel@@QAEXXZ PROC			; BatchedModel::flushBuffers, COMDAT
; _this$ = ecx

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __7B659B23_BatchedModel@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 88   : 
; 89   : 	glBufferData(GL_ARRAY_BUFFER, 1000 * sizeof(float), NULL, GL_DYNAMIC_DRAW);//loading data

	mov	esi, esp
	push	35048					; 000088e8H
	push	0
	push	4000					; 00000fa0H
	push	34962					; 00008892H
	call	DWORD PTR ___glewBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   : 	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, 0);//defing the vertex atrib

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	2
	push	0
	call	DWORD PTR ___glewVertexAttribPointer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 91   : 
; 92   : 
; 93   : // loading values into buffers
; 94   : 	glBindBuffer(GL_ARRAY_BUFFER, UVI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 95   : 	glBufferData(GL_ARRAY_BUFFER, 1000 * sizeof(float), NULL, GL_DYNAMIC_DRAW);//loading data

	mov	esi, esp
	push	35048					; 000088e8H
	push	0
	push	4000					; 00000fa0H
	push	34962					; 00008892H
	call	DWORD PTR ___glewBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 96   : 	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, 0);//defing the vertex atrib

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	2
	push	1
	call	DWORD PTR ___glewVertexAttribPointer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 97   : 
; 98   : 	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, INDI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	34963					; 00008893H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   : 	glBufferData(GL_ELEMENT_ARRAY_BUFFER, 1000 * sizeof(int), NULL, GL_DYNAMIC_DRAW);//loading data

	mov	esi, esp
	push	35048					; 000088e8H
	push	0
	push	4000					; 00000fa0H
	push	34963					; 00008893H
	call	DWORD PTR ___glewBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 100  : 
; 101  : 
; 102  : 
; 103  : 	drawCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 104  : 	drawCount2 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 105  : 	indbase = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 106  : 	pionter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 107  : 	sections = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 108  : 
; 109  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?flushBuffers@BatchedModel@@QAEXXZ ENDP			; BatchedModel::flushBuffers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\BatchedModel.cpp
;	COMDAT ?addValuesToVBO@BatchedModel@@QAEXQAM0@Z
_TEXT	SEGMENT
_indices$ = -40						; size = 24
_this$ = -8						; size = 4
_verts$ = 8						; size = 4
_uv$ = 12						; size = 4
?addValuesToVBO@BatchedModel@@QAEXQAM0@Z PROC		; BatchedModel::addValuesToVBO, COMDAT
; _this$ = ecx

; 53   : void BatchedModel::addValuesToVBO(float verts[8],float uv[8]) {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __7B659B23_BatchedModel@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 54   : 
; 55   : 	glBindBuffer(GL_ARRAY_BUFFER, VertI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 56   : 	
; 57   : 	glBufferSubData(GL_ARRAY_BUFFER,pionter,8*sizeof(float),verts);

	mov	esi, esp
	mov	eax, DWORD PTR _verts$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBufferSubData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 58   : 
; 59   : 	glBindBuffer(GL_ARRAY_BUFFER, UVI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 60   : 
; 61   : 	glBufferSubData(GL_ARRAY_BUFFER, pionter, 8 * sizeof(float), uv);

	mov	esi, esp
	mov	eax, DWORD PTR _uv$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBufferSubData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : 
; 63   : 	int indices[] = {
; 64   : 
; 65   : 		indbase,indbase+1,indbase+2,

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _indices$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	DWORD PTR _indices$[ebp+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	DWORD PTR _indices$[ebp+8], ecx

; 66   : 	     indbase+2,indbase+3,indbase

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	DWORD PTR _indices$[ebp+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 3
	mov	DWORD PTR _indices$[ebp+16], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _indices$[ebp+20], ecx

; 67   : 
; 68   : 	};
; 69   : 
; 70   : 
; 71   : 
; 72   : 	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,INDI);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	34963					; 00008893H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 73   : 	glBufferSubData(GL_ARRAY_BUFFER, drawCount2, 6 * sizeof(int), uv);

	mov	esi, esp
	mov	eax, DWORD PTR _uv$[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBufferSubData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 74   : 
; 75   : 	drawCount = drawCount + 6;//used for telling the amount of triangles to draw when the drawcall is made

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 76   : 	drawCount2 = drawCount * 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 77   : 	indbase = indbase + 4;//this makes sure that the indeces are loaded in right other wise it will  draw the same model multiple times

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 78   : 	pionter = pionter + (8 * 4);//pionter to the next value in the vertex and uv buffers so that it won't write over the old ones

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 79   : 	sections++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 80   : 
; 81   : 	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

	mov	esi, esp
	push	0
	push	34963					; 00008893H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 82   : 	glBindBuffer(GL_ARRAY_BUFFER,0);

	mov	esi, esp
	push	0
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 83   : 
; 84   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@addValuesT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@addValuesT:
	DD	1
	DD	$LN4@addValuesT
$LN4@addValuesT:
	DD	-40					; ffffffd8H
	DD	24					; 00000018H
	DD	$LN3@addValuesT
$LN3@addValuesT:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?addValuesToVBO@BatchedModel@@QAEXQAM0@Z ENDP		; BatchedModel::addValuesToVBO
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\BatchedModel.cpp
;	COMDAT ?Draw@BatchedModel@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Draw@BatchedModel@@QAEXXZ PROC				; BatchedModel::Draw, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __7B659B23_BatchedModel@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 38   : 	glBindBuffer(GL_ARRAY_BUFFER, VertI);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 39   : 	glEnableVertexAttribArray(0);//enabling vertex attrib

	mov	esi, esp
	push	0
	call	DWORD PTR ___glewEnableVertexAttribArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 40   : 
; 41   : 
; 42   : 	glBindBuffer(GL_ARRAY_BUFFER, UVI);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : 	glEnableVertexAttribArray(1);//enabling vertex attrib

	mov	esi, esp
	push	1
	call	DWORD PTR ___glewEnableVertexAttribArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 44   : 
; 45   : 
; 46   : 
; 47   : 
; 48   : 	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, INDI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	34963					; 00008893H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 	glDrawElements(GL_TRIANGLES, drawCount, GL_UNSIGNED_INT, 0);

	mov	esi, esp
	push	0
	push	5125					; 00001405H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	4
	call	DWORD PTR __imp__glDrawElements@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 50   : 
; 51   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@BatchedModel@@QAEXXZ ENDP				; BatchedModel::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\BatchedModel.cpp
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\BatchedModel.h
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\BatchedModel.cpp
;	COMDAT ??0BatchedModel@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0BatchedModel@@QAE@XZ PROC				; BatchedModel::BatchedModel, COMDAT
; _this$ = ecx

; 8    : BatchedModel::BatchedModel() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __7B659B23_BatchedModel@cpp
	call	@__CheckForDebuggerJustMyCode@4
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\BatchedModel.h

; 12   : 	int drawCount, pionter = 0, indbase,drawCount2,sections=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\BatchedModel.cpp

; 11   : 	drawCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 12   : 	glGenBuffers(1,&VertI);

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR ___glewGenBuffers
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13   : 	glGenBuffers(1, &UVI);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR ___glewGenBuffers
	cmp	esi, esp
	call	__RTC_CheckEsp

; 14   : 	glGenBuffers(1, &INDI);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR ___glewGenBuffers
	cmp	esi, esp
	call	__RTC_CheckEsp

; 15   : 
; 16   : 
; 17   : 	glBindBuffer(GL_ARRAY_BUFFER, VertI);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 18   : 	glBindBuffer(GL_ARRAY_BUFFER, VertI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 19   : 	glBufferData(GL_ARRAY_BUFFER, 1000 * sizeof(float),NULL, GL_DYNAMIC_DRAW);//loading data

	mov	esi, esp
	push	35048					; 000088e8H
	push	0
	push	4000					; 00000fa0H
	push	34962					; 00008892H
	call	DWORD PTR ___glewBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 20   : 	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, 0);//defing the vertex atrib

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	2
	push	0
	call	DWORD PTR ___glewVertexAttribPointer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 21   : 
; 22   : 
; 23   : // loading values into buffers
; 24   : 	glBindBuffer(GL_ARRAY_BUFFER, UVI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 25   : 	glBufferData(GL_ARRAY_BUFFER, 1000 * sizeof(float), NULL, GL_DYNAMIC_DRAW);//loading data

	mov	esi, esp
	push	35048					; 000088e8H
	push	0
	push	4000					; 00000fa0H
	push	34962					; 00008892H
	call	DWORD PTR ___glewBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 26   : 	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, 0);//defing the vertex atrib

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	2
	push	1
	call	DWORD PTR ___glewVertexAttribPointer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   : 
; 28   : 	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, INDI);//binding buffer

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	34963					; 00008893H
	call	DWORD PTR ___glewBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 29   : 	glBufferData(GL_ELEMENT_ARRAY_BUFFER, 1000 * sizeof(int),NULL, GL_DYNAMIC_DRAW);//loading data

	mov	esi, esp
	push	35048					; 000088e8H
	push	0
	push	4000					; 00000fa0H
	push	34963					; 00008893H
	call	DWORD PTR ___glewBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : 
; 31   : 
; 32   : 
; 33   : 
; 34   : 
; 35   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0BatchedModel@@QAE@XZ ENDP				; BatchedModel::BatchedModel
_TEXT	ENDS
END
