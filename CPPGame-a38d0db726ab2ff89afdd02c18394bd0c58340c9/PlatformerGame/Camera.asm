; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28315.0 

	TITLE	D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__BD3EDE1B_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__EC2FBCF1_cstdlib DB 01H
__4877352E_type_traits DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__CDF80030_limits DB 01H
__C0436A37_cmath DB 01H
__8FA2E757_func_common@inl DB 01H
__4B5530EF_Camera@h DB 01H
__64B47972_Camera@cpp DB 01H
__05392703_type_vec3@inl DB 01H
__C4BB2EA4_type_vec3@hpp DB 01H
__87ADDF22_type_mat4x4@inl DB 01H
__D322B372_func_trigonometric@inl DB 01H
__ADF50245_matrix_clip_space@inl DB 01H
__B719FB13_type_vec4@inl DB 01H
__769BF2B4_type_vec4@hpp DB 01H
__462FD685_type_mat4x4@hpp DB 01H
__8A4D5862_compute_common@hpp DB 01H
msvcjmc	ENDS
PUBLIC	_tanf
PUBLIC	?epsilon@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::epsilon
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	??0?$vec@$02M$0A@@glm@@QAE@M@Z			; glm::vec<3,float,0>::vec<3,float,0>
PUBLIC	?length@?$vec@$03M$0A@@glm@@SAHXZ		; glm::vec<4,float,0>::length
PUBLIC	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z		; glm::vec<4,float,0>::operator[]
PUBLIC	??A?$vec@$03M$0A@@glm@@QBEABMH@Z		; glm::vec<4,float,0>::operator[]
PUBLIC	??0?$vec@$03M$0A@@glm@@QAE@M@Z			; glm::vec<4,float,0>::vec<4,float,0>
PUBLIC	??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z		; glm::vec<4,float,0>::vec<4,float,0>
PUBLIC	?length@?$mat@$03$03M$0A@@glm@@SAHXZ		; glm::mat<4,4,float,0>::length
PUBLIC	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
PUBLIC	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
PUBLIC	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z		; glm::mat<4,4,float,0>::mat<4,4,float,0>
PUBLIC	??0Camera@@QAE@MMMU?$vec@$02M$0A@@glm@@@Z	; Camera::Camera
PUBLIC	?setSize@Camera@@QAEXMM@Z			; Camera::setSize
PUBLIC	?setPosition@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z ; Camera::setPosition
PUBLIC	?getWidth@Camera@@QAEMXZ			; Camera::getWidth
PUBLIC	?getHeight@Camera@@QAEMXZ			; Camera::getHeight
PUBLIC	?getPosition@Camera@@QAE?AU?$vec@$02M$0A@@glm@@XZ ; Camera::getPosition
PUBLIC	?getProjection@Camera@@QAE?AU?$mat@$03$03M$0A@@glm@@XZ ; Camera::getProjection
PUBLIC	?getFOV@Camera@@QAEMXZ				; Camera::getFOV
PUBLIC	?setFOV@Camera@@QAEXM@Z				; Camera::setFOV
PUBLIC	?setRotation@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z ; Camera::setRotation
PUBLIC	??$radians@M@glm@@YAMM@Z			; glm::radians<float>
PUBLIC	??$perspective@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspective<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@0@Z ; glm::operator*<float,0>
PUBLIC	??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z	; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z	; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z	; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z	; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>
PUBLIC	??$perspectiveLH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveLH_ZO<float>
PUBLIC	??$perspectiveLH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveLH_NO<float>
PUBLIC	??$perspectiveRH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveRH_ZO<float>
PUBLIC	??$perspectiveRH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveRH_NO<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z		; glm::vec<4,float,0>::operator*=<float>
PUBLIC	??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::vec<4,float,0>::operator+=<float>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1BHO@KLILKPCO@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ ; `string'
PUBLIC	??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@34000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@447a0000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___wassert:PROC
EXTRN	_tan:PROC
EXTRN	?getViewMatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0@Z:PROC ; getViewMatrix
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@34000000
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@
CONST	SEGMENT
??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@ DB 'a'
	DB	00H, 'b', 00H, 's', 00H, '(', 00H, 'a', 00H, 's', 00H, 'p', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, '-', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'l'
	DB	00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H
	DB	'T', 00H, '>', 00H, ':', 00H, ':', 00H, 'e', 00H, 'p', 00H, 's'
	DB	00H, 'i', 00H, 'l', 00H, 'o', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	')', 00H, ' ', 00H, '>', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'c', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, '<', 00H, 'T', 00H, '>', 00H, '(', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHO@KLILKPCO@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
CONST	SEGMENT
??_C@_1BHO@KLILKPCO@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'C', 00H, 'P', 00H, 'P', 00H, 'G', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, '-', 00H, 'a', 00H, '3', 00H, '8', 00H, 'd', 00H, '0'
	DB	00H, 'd', 00H, 'b', 00H, '7', 00H, '2', 00H, '6', 00H, 'a', 00H
	DB	'b', 00H, '2', 00H, 'f', 00H, 'f', 00H, '8', 00H, '9', 00H, 'a'
	DB	00H, 'f', 00H, 'd', 00H, 'd', 00H, '0', 00H, '2', 00H, 'c', 00H
	DB	'1', 00H, '8', 00H, '3', 00H, '9', 00H, '4', 00H, 'b', 00H, 'd'
	DB	00H, '0', 00H, 'c', 00H, '5', 00H, '8', 00H, '3', 00H, '4', 00H
	DB	'0', 00H, 'c', 00H, '9', 00H, '\', 00H, 'C', 00H, 'P', 00H, 'P'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, 'a', 00H
	DB	'3', 00H, '8', 00H, 'd', 00H, '0', 00H, 'd', 00H, 'b', 00H, '7'
	DB	00H, '2', 00H, '6', 00H, 'a', 00H, 'b', 00H, '2', 00H, 'f', 00H
	DB	'f', 00H, '8', 00H, '9', 00H, 'a', 00H, 'f', 00H, 'd', 00H, 'd'
	DB	00H, '0', 00H, '2', 00H, 'c', 00H, '1', 00H, '8', 00H, '3', 00H
	DB	'9', 00H, '4', 00H, 'b', 00H, 'd', 00H, '0', 00H, 'c', 00H, '5'
	DB	00H, '8', 00H, '3', 00H, '4', 00H, '0', 00H, 'c', 00H, '9', 00H
	DB	'\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'G', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'E', 00H, 'n', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'H', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, '\', 00H, 'm'
	DB	00H, 'a', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'x', 00H, '_', 00H
	DB	'c', 00H, 'l', 00H, 'i', 00H, 'p', 00H, '_', 00H, 's', 00H, 'p'
	DB	00H, 'a', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'i', 00H, 'n', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
CONST	SEGMENT
??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'C', 00H, 'P', 00H, 'P', 00H, 'G', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, '-', 00H, 'a', 00H, '3', 00H, '8', 00H, 'd', 00H, '0'
	DB	00H, 'd', 00H, 'b', 00H, '7', 00H, '2', 00H, '6', 00H, 'a', 00H
	DB	'b', 00H, '2', 00H, 'f', 00H, 'f', 00H, '8', 00H, '9', 00H, 'a'
	DB	00H, 'f', 00H, 'd', 00H, 'd', 00H, '0', 00H, '2', 00H, 'c', 00H
	DB	'1', 00H, '8', 00H, '3', 00H, '9', 00H, '4', 00H, 'b', 00H, 'd'
	DB	00H, '0', 00H, 'c', 00H, '5', 00H, '8', 00H, '3', 00H, '4', 00H
	DB	'0', 00H, 'c', 00H, '9', 00H, '\', 00H, 'C', 00H, 'P', 00H, 'P'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, 'a', 00H
	DB	'3', 00H, '8', 00H, 'd', 00H, '0', 00H, 'd', 00H, 'b', 00H, '7'
	DB	00H, '2', 00H, '6', 00H, 'a', 00H, 'b', 00H, '2', 00H, 'f', 00H
	DB	'f', 00H, '8', 00H, '9', 00H, 'a', 00H, 'f', 00H, 'd', 00H, 'd'
	DB	00H, '0', 00H, '2', 00H, 'c', 00H, '1', 00H, '8', 00H, '3', 00H
	DB	'9', 00H, '4', 00H, 'b', 00H, 'd', 00H, '0', 00H, 'c', 00H, '5'
	DB	00H, '8', 00H, '3', 00H, '4', 00H, '0', 00H, 'c', 00H, '9', 00H
	DB	'\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'G', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'E', 00H, 'n', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'H', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'm', 00H, 'a', 00H, 't', 00H, '4', 00H, 'x', 00H, '4'
	DB	00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
CONST	SEGMENT
??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'C', 00H, 'P', 00H, 'P', 00H, 'G', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, '-', 00H, 'a', 00H, '3', 00H, '8', 00H, 'd', 00H, '0'
	DB	00H, 'd', 00H, 'b', 00H, '7', 00H, '2', 00H, '6', 00H, 'a', 00H
	DB	'b', 00H, '2', 00H, 'f', 00H, 'f', 00H, '8', 00H, '9', 00H, 'a'
	DB	00H, 'f', 00H, 'd', 00H, 'd', 00H, '0', 00H, '2', 00H, 'c', 00H
	DB	'1', 00H, '8', 00H, '3', 00H, '9', 00H, '4', 00H, 'b', 00H, 'd'
	DB	00H, '0', 00H, 'c', 00H, '5', 00H, '8', 00H, '3', 00H, '4', 00H
	DB	'0', 00H, 'c', 00H, '9', 00H, '\', 00H, 'C', 00H, 'P', 00H, 'P'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, 'a', 00H
	DB	'3', 00H, '8', 00H, 'd', 00H, '0', 00H, 'd', 00H, 'b', 00H, '7'
	DB	00H, '2', 00H, '6', 00H, 'a', 00H, 'b', 00H, '2', 00H, 'f', 00H
	DB	'f', 00H, '8', 00H, '9', 00H, 'a', 00H, 'f', 00H, 'd', 00H, 'd'
	DB	00H, '0', 00H, '2', 00H, 'c', 00H, '1', 00H, '8', 00H, '3', 00H
	DB	'9', 00H, '4', 00H, 'b', 00H, 'd', 00H, '0', 00H, 'c', 00H, '5'
	DB	00H, '8', 00H, '3', 00H, '4', 00H, '0', 00H, 'c', 00H, '9', 00H
	DB	'\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'G', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'E', 00H, 'n', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'H', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '4', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?tan@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?epsilon@?$numeric_limits@M@std@@SAMXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 12   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 13   : 			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z	; glm::vec<4,float,0>::vec<4,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 14   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 30   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 31   : 			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z	; glm::vec<4,float,0>::vec<4,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 32   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\compute_common.hpp
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = -196						; size = 4
_x$ = 8							; size = 4
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 17   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8A4D5862_compute_common@hpp
	call	@__CheckForDebuggerJustMyCode@4

; 18   : 			GLM_STATIC_ASSERT(
; 19   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed,
; 20   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 21   : 
; 22   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR tv66[ebp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR _x$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[ebp], xmm0
$LN4@call:
	fld	DWORD PTR tv66[ebp]

; 23   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 24   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
$T1 = -248						; size = 16
$T2 = -224						; size = 16
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z PROC	; glm::vec<4,float,0>::operator+=<float>, COMDAT
; _this$ = ecx

; 554  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 555  : 		return (*this = detail::compute_vec4_add<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T2[ebp+12], edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]

; 556  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP	; glm::vec<4,float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z
_TEXT	SEGMENT
$T1 = -248						; size = 16
$T2 = -224						; size = 16
_this$ = -8						; size = 4
_scalar$ = 8						; size = 4
??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z PROC		; glm::vec<4,float,0>::operator*=<float>, COMDAT
; _this$ = ecx

; 582  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 583  : 		return (*this = detail::compute_vec4_mul<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));

	push	ecx
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$vec@$03M$0A@@glm@@QAE@M@Z		; glm::vec<4,float,0>::vec<4,float,0>
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR _this$[ebp]

; 584  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z ENDP		; glm::vec<4,float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 271  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8FA2E757_func_common@inl
	call	@__CheckForDebuggerJustMyCode@4

; 272  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call
	add	esp, 4

; 273  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
$T1 = -212						; size = 16
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 829  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 830  : 		return vec<4, T, Q>(v1) += v2;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp+12], edx
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z ; glm::vec<4,float,0>::operator+=<float>
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 831  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z
_TEXT	SEGMENT
$T1 = -212						; size = 16
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z PROC	; glm::operator*<float,0>, COMDAT

; 865  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 866  : 		return vec<4, T, Q>(v) *= scalar;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp+12], edx
	mov	eax, DWORD PTR _scalar$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z	; glm::vec<4,float,0>::operator*=<float>
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 867  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_clip_space.inl
;	COMDAT ??$perspectiveRH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z
_TEXT	SEGMENT
tv165 = -300						; size = 4
tv204 = -296						; size = 4
tv202 = -296						; size = 4
tv200 = -296						; size = 4
tv198 = -296						; size = 4
tv159 = -296						; size = 4
$T1 = -288						; size = 4
_Result$ = -84						; size = 64
_tanHalfFovy$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_fovy$ = 12						; size = 4
_aspect$ = 16						; size = 4
_zNear$ = 20						; size = 4
_zFar$ = 24						; size = 4
??$perspectiveRH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z PROC ; glm::perspectiveRH_NO<float>, COMDAT

; 240  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __ADF50245_matrix_clip_space@inl
	call	@__CheckForDebuggerJustMyCode@4

; 241  : 		assert(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0));

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR _aspect$[ebp]
	subss	xmm0, DWORD PTR tv159[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	add	esp, 4
	fstp	DWORD PTR tv165[ebp]
	movss	xmm0, DWORD PTR tv165[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN3@perspectiv
	mov	esi, esp
	push	241					; 000000f1H
	push	OFFSET ??_C@_1BHO@KLILKPCO@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@perspectiv:

; 242  : 
; 243  : 		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

	movss	xmm0, DWORD PTR _fovy$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR _tanHalfFovy$[ebp]

; 244  : 
; 245  : 		mat<4, 4, T, defaultp> Result(static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z	; glm::mat<4,4,float,0>::mat<4,4,float,0>

; 246  : 		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);

	movss	xmm0, DWORD PTR _aspect$[ebp]
	mulss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	0
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv198[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv198[ebp]
	movss	DWORD PTR [eax], xmm0

; 247  : 		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	push	1
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv200[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR [eax], xmm0

; 248  : 		Result[2][2] = - (zFar + zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	addss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	push	2
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv202[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv202[ebp]
	movss	DWORD PTR [eax], xmm0

; 249  : 		Result[2][3] = - static_cast<T>(1);

	push	3
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 250  : 		Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zFar$[ebp]
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	push	2
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv204[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv204[ebp]
	movss	DWORD PTR [eax], xmm0

; 251  : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 252  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@perspectiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@perspectiv:
	DD	1
	DD	$LN5@perspectiv
$LN5@perspectiv:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN4@perspectiv
$LN4@perspectiv:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$perspectiveRH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ENDP ; glm::perspectiveRH_NO<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_clip_space.inl
;	COMDAT ??$perspectiveRH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z
_TEXT	SEGMENT
tv161 = -300						; size = 4
tv200 = -296						; size = 4
tv198 = -296						; size = 4
tv196 = -296						; size = 4
tv194 = -296						; size = 4
tv155 = -296						; size = 4
$T1 = -288						; size = 4
_Result$ = -84						; size = 64
_tanHalfFovy$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_fovy$ = 12						; size = 4
_aspect$ = 16						; size = 4
_zNear$ = 20						; size = 4
_zFar$ = 24						; size = 4
??$perspectiveRH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z PROC ; glm::perspectiveRH_ZO<float>, COMDAT

; 224  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __ADF50245_matrix_clip_space@inl
	call	@__CheckForDebuggerJustMyCode@4

; 225  : 		assert(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0));

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR _aspect$[ebp]
	subss	xmm0, DWORD PTR tv155[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	add	esp, 4
	fstp	DWORD PTR tv161[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN3@perspectiv
	mov	esi, esp
	push	225					; 000000e1H
	push	OFFSET ??_C@_1BHO@KLILKPCO@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@perspectiv:

; 226  : 
; 227  : 		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

	movss	xmm0, DWORD PTR _fovy$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR _tanHalfFovy$[ebp]

; 228  : 
; 229  : 		mat<4, 4, T, defaultp> Result(static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z	; glm::mat<4,4,float,0>::mat<4,4,float,0>

; 230  : 		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);

	movss	xmm0, DWORD PTR _aspect$[ebp]
	mulss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	0
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv194[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv194[ebp]
	movss	DWORD PTR [eax], xmm0

; 231  : 		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	push	1
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv196[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv196[ebp]
	movss	DWORD PTR [eax], xmm0

; 232  : 		Result[2][2] = zFar / (zNear - zFar);

	movss	xmm0, DWORD PTR _zNear$[ebp]
	subss	xmm0, DWORD PTR _zFar$[ebp]
	movss	xmm1, DWORD PTR _zFar$[ebp]
	divss	xmm1, xmm0
	push	2
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv198[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv198[ebp]
	movss	DWORD PTR [eax], xmm0

; 233  : 		Result[2][3] = - static_cast<T>(1);

	push	3
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax], xmm0

; 234  : 		Result[3][2] = -(zFar * zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	push	2
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv200[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR [eax], xmm0

; 235  : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 236  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@perspectiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@perspectiv:
	DD	1
	DD	$LN5@perspectiv
$LN5@perspectiv:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN4@perspectiv
$LN4@perspectiv:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$perspectiveRH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ENDP ; glm::perspectiveRH_ZO<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_clip_space.inl
;	COMDAT ??$perspectiveLH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z
_TEXT	SEGMENT
tv163 = -300						; size = 4
tv202 = -296						; size = 4
tv200 = -296						; size = 4
tv198 = -296						; size = 4
tv196 = -296						; size = 4
tv157 = -296						; size = 4
$T1 = -288						; size = 4
_Result$ = -84						; size = 64
_tanHalfFovy$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_fovy$ = 12						; size = 4
_aspect$ = 16						; size = 4
_zNear$ = 20						; size = 4
_zFar$ = 24						; size = 4
??$perspectiveLH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z PROC ; glm::perspectiveLH_NO<float>, COMDAT

; 272  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __ADF50245_matrix_clip_space@inl
	call	@__CheckForDebuggerJustMyCode@4

; 273  : 		assert(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0));

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	fstp	DWORD PTR tv157[ebp]
	movss	xmm0, DWORD PTR _aspect$[ebp]
	subss	xmm0, DWORD PTR tv157[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	add	esp, 4
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN3@perspectiv
	mov	esi, esp
	push	273					; 00000111H
	push	OFFSET ??_C@_1BHO@KLILKPCO@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@perspectiv:

; 274  : 
; 275  : 		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

	movss	xmm0, DWORD PTR _fovy$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR _tanHalfFovy$[ebp]

; 276  : 
; 277  : 		mat<4, 4, T, defaultp> Result(static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z	; glm::mat<4,4,float,0>::mat<4,4,float,0>

; 278  : 		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);

	movss	xmm0, DWORD PTR _aspect$[ebp]
	mulss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	0
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv196[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv196[ebp]
	movss	DWORD PTR [eax], xmm0

; 279  : 		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	push	1
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv198[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv198[ebp]
	movss	DWORD PTR [eax], xmm0

; 280  : 		Result[2][2] = (zFar + zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	addss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	push	2
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv200[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR [eax], xmm0

; 281  : 		Result[2][3] = static_cast<T>(1);

	push	3
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 282  : 		Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zFar$[ebp]
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	push	2
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv202[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv202[ebp]
	movss	DWORD PTR [eax], xmm0

; 283  : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 284  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@perspectiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@perspectiv:
	DD	1
	DD	$LN5@perspectiv
$LN5@perspectiv:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN4@perspectiv
$LN4@perspectiv:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$perspectiveLH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ENDP ; glm::perspectiveLH_NO<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_clip_space.inl
;	COMDAT ??$perspectiveLH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z
_TEXT	SEGMENT
tv161 = -300						; size = 4
tv200 = -296						; size = 4
tv198 = -296						; size = 4
tv196 = -296						; size = 4
tv194 = -296						; size = 4
tv155 = -296						; size = 4
$T1 = -288						; size = 4
_Result$ = -84						; size = 64
_tanHalfFovy$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_fovy$ = 12						; size = 4
_aspect$ = 16						; size = 4
_zNear$ = 20						; size = 4
_zFar$ = 24						; size = 4
??$perspectiveLH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z PROC ; glm::perspectiveLH_ZO<float>, COMDAT

; 256  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __ADF50245_matrix_clip_space@inl
	call	@__CheckForDebuggerJustMyCode@4

; 257  : 		assert(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0));

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR _aspect$[ebp]
	subss	xmm0, DWORD PTR tv155[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	add	esp, 4
	fstp	DWORD PTR tv161[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN3@perspectiv
	mov	esi, esp
	push	257					; 00000101H
	push	OFFSET ??_C@_1BHO@KLILKPCO@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@perspectiv:

; 258  : 
; 259  : 		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

	movss	xmm0, DWORD PTR _fovy$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR _tanHalfFovy$[ebp]

; 260  : 
; 261  : 		mat<4, 4, T, defaultp> Result(static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z	; glm::mat<4,4,float,0>::mat<4,4,float,0>

; 262  : 		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);

	movss	xmm0, DWORD PTR _aspect$[ebp]
	mulss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	push	0
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv194[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv194[ebp]
	movss	DWORD PTR [eax], xmm0

; 263  : 		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _tanHalfFovy$[ebp]
	push	1
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv196[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv196[ebp]
	movss	DWORD PTR [eax], xmm0

; 264  : 		Result[2][2] = zFar / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	subss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR _zFar$[ebp]
	divss	xmm1, xmm0
	push	2
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv198[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv198[ebp]
	movss	DWORD PTR [eax], xmm0

; 265  : 		Result[2][3] = static_cast<T>(1);

	push	3
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 266  : 		Result[3][2] = -(zFar * zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	push	2
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv200[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR [eax], xmm0

; 267  : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@perspectiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@perspectiv:
	DD	1
	DD	$LN5@perspectiv
$LN5@perspectiv:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN4@perspectiv
$LN4@perspectiv:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$perspectiveLH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ENDP ; glm::perspectiveLH_ZO<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	cvtsi2ss xmm0, DWORD PTR __x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	cvtsi2ss xmm0, DWORD PTR __y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	cvtsi2ss xmm0, DWORD PTR __z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __w$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	cvtsi2ss xmm0, DWORD PTR __x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	cvtsi2ss xmm0, DWORD PTR __y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	cvtsi2ss xmm0, DWORD PTR __w$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	cvtsi2ss xmm0, DWORD PTR __x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	cvtsi2ss xmm0, DWORD PTR __z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	cvtsi2ss xmm0, DWORD PTR __w$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	cvtsi2ss xmm0, DWORD PTR __y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	cvtsi2ss xmm0, DWORD PTR __z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	cvtsi2ss xmm0, DWORD PTR __w$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
$T1 = -1320						; size = 16
$T2 = -1296						; size = 16
$T3 = -1272						; size = 16
$T4 = -1248						; size = 16
$T5 = -1224						; size = 16
$T6 = -1200						; size = 16
$T7 = -1176						; size = 16
$T8 = -1152						; size = 16
$T9 = -1128						; size = 16
$T10 = -1104						; size = 16
$T11 = -1080						; size = 16
$T12 = -1056						; size = 16
$T13 = -1032						; size = 16
$T14 = -1008						; size = 16
$T15 = -984						; size = 16
$T16 = -960						; size = 16
$T17 = -936						; size = 16
$T18 = -912						; size = 16
$T19 = -888						; size = 16
$T20 = -864						; size = 16
$T21 = -840						; size = 16
$T22 = -816						; size = 16
$T23 = -792						; size = 16
$T24 = -768						; size = 16
$T25 = -744						; size = 16
$T26 = -720						; size = 16
$T27 = -696						; size = 16
$T28 = -672						; size = 16
_Result$ = -264						; size = 64
_SrcB3$ = -192						; size = 16
_SrcB2$ = -168						; size = 16
_SrcB1$ = -144						; size = 16
_SrcB0$ = -120						; size = 16
_SrcA3$ = -96						; size = 16
_SrcA2$ = -72						; size = 16
_SrcA1$ = -48						; size = 16
_SrcA0$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 631  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 1324				; 0000052cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1324]
	mov	ecx, 331				; 0000014bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __87ADDF22_type_mat4x4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 632  : 		typename mat<4, 4, T, Q>::col_type const SrcA0 = m1[0];

	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcA0$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcA0$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcA0$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcA0$[ebp+12], edx

; 633  : 		typename mat<4, 4, T, Q>::col_type const SrcA1 = m1[1];

	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcA1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcA1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcA1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcA1$[ebp+12], edx

; 634  : 		typename mat<4, 4, T, Q>::col_type const SrcA2 = m1[2];

	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcA2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcA2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcA2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcA2$[ebp+12], edx

; 635  : 		typename mat<4, 4, T, Q>::col_type const SrcA3 = m1[3];

	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcA3$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcA3$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcA3$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcA3$[ebp+12], edx

; 636  : 
; 637  : 		typename mat<4, 4, T, Q>::col_type const SrcB0 = m2[0];

	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcB0$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcB0$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcB0$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcB0$[ebp+12], edx

; 638  : 		typename mat<4, 4, T, Q>::col_type const SrcB1 = m2[1];

	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcB1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcB1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcB1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcB1$[ebp+12], edx

; 639  : 		typename mat<4, 4, T, Q>::col_type const SrcB2 = m2[2];

	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcB2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcB2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcB2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcB2$[ebp+12], edx

; 640  : 		typename mat<4, 4, T, Q>::col_type const SrcB3 = m2[3];

	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SrcB3$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SrcB3$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SrcB3$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SrcB3$[ebp+12], edx

; 641  : 
; 642  : 		mat<4, 4, T, Q> Result;
; 643  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	push	3
	lea	ecx, DWORD PTR _SrcB0$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA3$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T28[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	lea	ecx, DWORD PTR _SrcB0$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR _SrcA2$[ebp]
	push	edx
	lea	eax, DWORD PTR $T27[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	lea	ecx, DWORD PTR _SrcB0$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR _SrcA1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	lea	ecx, DWORD PTR _SrcB0$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA0$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T25[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T24[ebp]
	push	edx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T23[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T22[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx

; 644  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	push	3
	lea	ecx, DWORD PTR _SrcB1$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA3$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T21[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	lea	ecx, DWORD PTR _SrcB1$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR _SrcA2$[ebp]
	push	edx
	lea	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	lea	ecx, DWORD PTR _SrcB1$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR _SrcA1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T19[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	lea	ecx, DWORD PTR _SrcB1$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA0$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T18[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T17[ebp]
	push	edx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T16[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T15[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx

; 645  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	push	3
	lea	ecx, DWORD PTR _SrcB2$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA3$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T14[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	lea	ecx, DWORD PTR _SrcB2$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR _SrcA2$[ebp]
	push	edx
	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	lea	ecx, DWORD PTR _SrcB2$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR _SrcA1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	lea	ecx, DWORD PTR _SrcB2$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA0$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T10[ebp]
	push	edx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx

; 646  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	push	3
	lea	ecx, DWORD PTR _SrcB3$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA3$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	lea	ecx, DWORD PTR _SrcB3$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR _SrcA2$[ebp]
	push	edx
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	lea	ecx, DWORD PTR _SrcB3$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR _SrcA1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	lea	ecx, DWORD PTR _SrcB3$[ebp]
	call	??A?$vec@$03M$0A@@glm@@QBEABMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR _SrcA0$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx

; 647  : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1324				; 0000052cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@operator:
	DD	9
	DD	$LN12@operator
$LN12@operator:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@operator
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN4@operator
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN5@operator
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN6@operator
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN7@operator
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN8@operator
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN9@operator
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN10@operator
	DD	-264					; fffffef8H
	DD	64					; 00000040H
	DD	$LN11@operator
$LN11@operator:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN10@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	66					; 00000042H
	DB	51					; 00000033H
	DB	0
$LN9@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	66					; 00000042H
	DB	50					; 00000032H
	DB	0
$LN8@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	66					; 00000042H
	DB	49					; 00000031H
	DB	0
$LN7@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	66					; 00000042H
	DB	48					; 00000030H
	DB	0
$LN6@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	51					; 00000033H
	DB	0
$LN5@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	50					; 00000032H
	DB	0
$LN4@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	49					; 00000031H
	DB	0
$LN3@operator:
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	48					; 00000030H
	DB	0
??$?DM$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_clip_space.inl
;	COMDAT ??$perspective@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_fovy$ = 12						; size = 4
_aspect$ = 16						; size = 4
_zNear$ = 20						; size = 4
_zFar$ = 24						; size = 4
??$perspective@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z PROC ; glm::perspective<float>, COMDAT

; 325  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __ADF50245_matrix_clip_space@inl
	call	@__CheckForDebuggerJustMyCode@4

; 326  : 		GLM_IF_CONSTEXPR(GLM_CONFIG_CLIP_CONTROL == GLM_CLIP_CONTROL_LH_ZO)

	xor	eax, eax
	je	SHORT $LN2@perspectiv

; 327  : 			return perspectiveLH_ZO(fovy, aspect, zNear, zFar);

	push	ecx
	movss	xmm0, DWORD PTR _zFar$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zNear$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _aspect$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fovy$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$perspectiveLH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveLH_ZO<float>
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@perspectiv
	jmp	$LN8@perspectiv
$LN2@perspectiv:

; 328  : 		else GLM_IF_CONSTEXPR(GLM_CONFIG_CLIP_CONTROL == GLM_CLIP_CONTROL_LH_NO)

	xor	eax, eax
	je	SHORT $LN4@perspectiv

; 329  : 			return perspectiveLH_NO(fovy, aspect, zNear, zFar);

	push	ecx
	movss	xmm0, DWORD PTR _zFar$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zNear$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _aspect$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fovy$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$perspectiveLH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveLH_NO<float>
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@perspectiv
	jmp	$LN8@perspectiv
$LN4@perspectiv:

; 330  : 		else GLM_IF_CONSTEXPR(GLM_CONFIG_CLIP_CONTROL == GLM_CLIP_CONTROL_RH_ZO)

	xor	eax, eax
	je	SHORT $LN6@perspectiv

; 331  : 			return perspectiveRH_ZO(fovy, aspect, zNear, zFar);

	push	ecx
	movss	xmm0, DWORD PTR _zFar$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zNear$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _aspect$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fovy$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$perspectiveRH_ZO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveRH_ZO<float>
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN8@perspectiv
	jmp	SHORT $LN8@perspectiv
$LN6@perspectiv:

; 332  : 		else GLM_IF_CONSTEXPR(GLM_CONFIG_CLIP_CONTROL == GLM_CLIP_CONTROL_RH_NO)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN8@perspectiv

; 333  : 			return perspectiveRH_NO(fovy, aspect, zNear, zFar);

	push	ecx
	movss	xmm0, DWORD PTR _zFar$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zNear$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _aspect$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fovy$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$perspectiveRH_NO@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspectiveRH_NO<float>
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN8@perspectiv:

; 334  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$perspective@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ENDP ; glm::perspective<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_trigonometric.inl
;	COMDAT ??$radians@M@glm@@YAMM@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
_degrees$ = 8						; size = 4
??$radians@M@glm@@YAMM@Z PROC				; glm::radians<float>, COMDAT

; 10   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D322B372_func_trigonometric@inl
	call	@__CheckForDebuggerJustMyCode@4

; 11   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'radians' only accept floating-point input");
; 12   : 
; 13   : 		return degrees * static_cast<genType>(0.01745329251994329576923690768489);

	movss	xmm0, DWORD PTR _degrees$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 14   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$radians@M@glm@@YAMM@Z ENDP				; glm::radians<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?setRotation@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rotation$ = 8						; size = 12
?setRotation@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z PROC	; Camera::setRotation, COMDAT
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 74   : 	Camera::rotation = rotation;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	mov	ecx, DWORD PTR _rotation$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rotation$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rotation$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 75   : 
; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setRotation@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z ENDP	; Camera::setRotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?setFOV@Camera@@QAEXM@Z
_TEXT	SEGMENT
$T1 = -272						; size = 64
_this$ = -8						; size = 4
_fov$ = 8						; size = 4
?setFOV@Camera@@QAEXM@Z PROC				; Camera::setFOV, COMDAT
; _this$ = ecx

; 64   : void Camera::setFOV(float fov) {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 65   : 	Camera::fov=fov;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fov$[ebp]
	movss	DWORD PTR [eax+96], xmm0

; 66   : 	Camera::projection = glm::perspective(glm::radians(fov), width / height, 0.1f, 1000.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fov$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$perspective@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspective<float>
	add	esp, 20					; 00000014H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 20					; 00000014H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	rep movsd

; 67   : 
; 68   : 
; 69   : 
; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setFOV@Camera@@QAEXM@Z ENDP				; Camera::setFOV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?getFOV@Camera@@QAEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getFOV@Camera@@QAEMXZ PROC				; Camera::getFOV, COMDAT
; _this$ = ecx

; 60   : float Camera::getFOV() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 61   : 	return Camera::fov;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+96]

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getFOV@Camera@@QAEMXZ ENDP				; Camera::getFOV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?getProjection@Camera@@QAE?AU?$mat@$03$03M$0A@@glm@@XZ
_TEXT	SEGMENT
$T1 = -432						; size = 64
$T2 = -360						; size = 4
_target$ = -156						; size = 64
_id$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?getProjection@Camera@@QAE?AU?$mat@$03$03M$0A@@glm@@XZ PROC ; Camera::getProjection, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 49   : 	
; 50   : 	glm::mat4 id(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T2[ebp], xmm0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR _id$[ebp]
	call	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z	; glm::mat<4,4,float,0>::mat<4,4,float,0>

; 51   : 	id=getViewMatrix(position,rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?getViewMatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0@Z ; getViewMatrix
	add	esp, 28					; 0000001cH
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _id$[ebp]
	rep movsd

; 52   : 	glm::mat4 target = projection* id;

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	lea	edx, DWORD PTR _target$[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@0@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH

; 53   : 	return target;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _target$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 54   : 
; 55   : 
; 56   : 
; 57   : 
; 58   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@getProject
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN6@getProject:
	DD	2
	DD	$LN5@getProject
$LN5@getProject:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN3@getProject
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN4@getProject
$LN4@getProject:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN3@getProject:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
?getProjection@Camera@@QAE?AU?$mat@$03$03M$0A@@glm@@XZ ENDP ; Camera::getProjection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?getPosition@Camera@@QAE?AU?$vec@$02M$0A@@glm@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getPosition@Camera@@QAE?AU?$vec@$02M$0A@@glm@@XZ PROC	; Camera::getPosition, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 44   : 	return position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 45   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getPosition@Camera@@QAE?AU?$vec@$02M$0A@@glm@@XZ ENDP	; Camera::getPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?getHeight@Camera@@QAEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getHeight@Camera@@QAEMXZ PROC				; Camera::getHeight, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 39   : 	return height;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]

; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getHeight@Camera@@QAEMXZ ENDP				; Camera::getHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?getWidth@Camera@@QAEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getWidth@Camera@@QAEMXZ PROC				; Camera::getWidth, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 34   : 	return width;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]

; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getWidth@Camera@@QAEMXZ ENDP				; Camera::getWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?setPosition@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 12
?setPosition@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z PROC	; Camera::setPosition, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 28   : 	Camera::position = position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _position$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _position$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 29   : 
; 30   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setPosition@Camera@@QAEXU?$vec@$02M$0A@@glm@@@Z ENDP	; Camera::setPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ?setSize@Camera@@QAEXMM@Z
_TEXT	SEGMENT
$T1 = -272						; size = 64
_this$ = -8						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?setSize@Camera@@QAEXMM@Z PROC				; Camera::setSize, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 19   : 	Camera::width = width;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 20   : 	Camera::height = height;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 21   : 	Camera::projection = glm::perspective(glm::radians(fov), width / height, 0.1f, 1000.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _width$[ebp]
	divss	xmm0, DWORD PTR _height$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+96]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$perspective@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspective<float>
	add	esp, 20					; 00000014H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 20					; 00000014H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	rep movsd

; 22   : 
; 23   : 
; 24   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setSize@Camera@@QAEXMM@Z ENDP				; Camera::setSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\Camera.cpp
;	COMDAT ??0Camera@@QAE@MMMU?$vec@$02M$0A@@glm@@@Z
_TEXT	SEGMENT
$T1 = -292						; size = 64
$T2 = -220						; size = 12
_this$ = -8						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_fov$ = 16						; size = 4
_rotation$ = 20						; size = 12
??0Camera@@QAE@MMMU?$vec@$02M$0A@@glm@@@Z PROC		; Camera::Camera, COMDAT
; _this$ = ecx

; 6    : Camera::Camera(float width,float height,float fov,glm::vec3 rotation) {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __64B47972_Camera@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 7    : 	Camera::width = width;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 8    : 	Camera::height = height;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 9    : 	Camera::position = glm::vec3(0);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$vec@$02M$0A@@glm@@QAE@M@Z		; glm::vec<3,float,0>::vec<3,float,0>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 10   : 	Camera::fov = fov;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fov$[ebp]
	movss	DWORD PTR [eax+96], xmm0

; 11   : 	Camera::rotation = rotation;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	mov	ecx, DWORD PTR _rotation$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rotation$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rotation$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 12   : 
; 13   : 	Camera::projection = glm::perspective(glm::radians(fov),width/height,0.1f,1000.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _width$[ebp]
	divss	xmm0, DWORD PTR _height$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fov$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$perspective@M@glm@@YA?AU?$mat@$03$03M$0A@@0@MMMM@Z ; glm::perspective<float>
	add	esp, 20					; 00000014H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 20					; 00000014H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	rep movsd

; 14   : 
; 15   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0Camera@@QAE@MMMU?$vec@$02M$0A@@glm@@@Z ENDP		; Camera::Camera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = 8							; size = 4
??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z PROC		; glm::mat<4,4,float,0>::mat<4,4,float,0>, COMDAT
; _this$ = ecx

; 43   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __87ADDF22_type_mat4x4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 41   : 			: value{col_type(s, 0, 0, 0), col_type(0, s, 0, 0), col_type(0, 0, s, 0), col_type(0, 0, 0, s)}

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z ; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>
	push	0
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z ; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z ; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z ; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>

; 44   : #		if !GLM_HAS_INITIALIZER_LISTS
; 45   : 			this->value[0] = col_type(s, 0, 0, 0);
; 46   : 			this->value[1] = col_type(0, s, 0, 0);
; 47   : 			this->value[2] = col_type(0, 0, s, 0);
; 48   : 			this->value[3] = col_type(0, 0, 0, s);
; 49   : #		endif
; 50   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z ENDP		; glm::mat<4,4,float,0>::mat<4,4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z PROC ; glm::mat<4,4,float,0>::operator[], COMDAT
; _this$ = ecx

; 297  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __87ADDF22_type_mat4x4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 298  : 		assert(i < this->length());

	call	?length@?$mat@$03$03M$0A@@glm@@SAHXZ	; glm::mat<4,4,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN3@operator
	mov	esi, esp
	push	298					; 0000012aH
	push	OFFSET ??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator:

; 299  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 300  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ENDP ; glm::mat<4,4,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z PROC ; glm::mat<4,4,float,0>::operator[], COMDAT
; _this$ = ecx

; 290  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __87ADDF22_type_mat4x4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 291  : 		assert(i < this->length());

	call	?length@?$mat@$03$03M$0A@@glm@@SAHXZ	; glm::mat<4,4,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN3@operator
	mov	esi, esp
	push	291					; 00000123H
	push	OFFSET ??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator:

; 292  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 293  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ENDP ; glm::mat<4,4,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$mat@$03$03M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$mat@$03$03M$0A@@glm@@SAHXZ PROC		; glm::mat<4,4,float,0>::length, COMDAT

; 28   : 		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __462FD685_type_mat4x4@hpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$mat@$03$03M$0A@@glm@@SAHXZ ENDP		; glm::mat<4,4,float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z PROC			; glm::vec<4,float,0>::vec<4,float,0>, COMDAT
; _this$ = ecx

; 162  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 161  : 		: x(_x), y(_y), z(_z), w(_w)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __w$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 162  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z ENDP			; glm::vec<4,float,0>::vec<4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??0?$vec@$03M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scalar$ = 8						; size = 4
??0?$vec@$03M$0A@@glm@@QAE@M@Z PROC			; glm::vec<4,float,0>::vec<4,float,0>, COMDAT
; _this$ = ecx

; 157  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 156  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 157  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$vec@$03M$0A@@glm@@QAE@M@Z ENDP			; glm::vec<4,float,0>::vec<4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??A?$vec@$03M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$vec@$03M$0A@@glm@@QBEABMH@Z PROC			; glm::vec<4,float,0>::operator[], COMDAT
; _this$ = ecx

; 496  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 497  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN9@operator
	call	?length@?$vec@$03M$0A@@glm@@SAHXZ	; glm::vec<4,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN10@operator
$LN9@operator:
	mov	esi, esp
	push	497					; 000001f1H
	push	OFFSET ??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@operator:

; 498  : 		switch(i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv71[ebp], 2
	je	SHORT $LN6@operator
	cmp	DWORD PTR tv71[ebp], 3
	je	SHORT $LN7@operator

; 499  : 		{
; 500  : 		default:
; 501  : 		case 0:
; 502  : 			return x;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:

; 503  : 		case 1:
; 504  : 			return y;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:

; 505  : 		case 2:
; 506  : 			return z;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	jmp	SHORT $LN1@operator
$LN7@operator:

; 507  : 		case 3:
; 508  : 			return w;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
$LN1@operator:

; 509  : 		}
; 510  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vec@$03M$0A@@glm@@QBEABMH@Z ENDP			; glm::vec<4,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??A?$vec@$03M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$vec@$03M$0A@@glm@@QAEAAMH@Z PROC			; glm::vec<4,float,0>::operator[], COMDAT
; _this$ = ecx

; 478  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 479  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN9@operator
	call	?length@?$vec@$03M$0A@@glm@@SAHXZ	; glm::vec<4,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN10@operator
$LN9@operator:
	mov	esi, esp
	push	479					; 000001dfH
	push	OFFSET ??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@operator:

; 480  : 		switch(i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv71[ebp], 2
	je	SHORT $LN6@operator
	cmp	DWORD PTR tv71[ebp], 3
	je	SHORT $LN7@operator

; 481  : 		{
; 482  : 		default:
; 483  : 		case 0:
; 484  : 			return x;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:

; 485  : 		case 1:
; 486  : 			return y;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:

; 487  : 		case 2:
; 488  : 			return z;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	jmp	SHORT $LN1@operator
$LN7@operator:

; 489  : 		case 3:
; 490  : 			return w;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
$LN1@operator:

; 491  : 		}
; 492  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vec@$03M$0A@@glm@@QAEAAMH@Z ENDP			; glm::vec<4,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$vec@$03M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$vec@$03M$0A@@glm@@SAHXZ PROC			; glm::vec<4,float,0>::length, COMDAT

; 90   : 		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __769BF2B4_type_vec4@hpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$vec@$03M$0A@@glm@@SAHXZ ENDP			; glm::vec<4,float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??0?$vec@$02M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scalar$ = 8						; size = 4
??0?$vec@$02M$0A@@glm@@QAE@M@Z PROC			; glm::vec<3,float,0>::vec<3,float,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 33   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 34   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$vec@$02M$0A@@glm@@QAE@M@Z ENDP			; glm::vec<3,float,0>::vec<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\cmath
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 245  : _NODISCARD _Check_return_ inline float tan(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?tan@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __C0436A37_cmath
	call	@__CheckForDebuggerJustMyCode@4

; 246  :     return _CSTD tanf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_tanf
	add	esp, 4

; 247  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?tan@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?tan@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?tan@@YAMM@Z ENDP					; tan
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\limits
;	COMDAT ?epsilon@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?epsilon@?$numeric_limits@M@std@@SAMXZ PROC		; std::numeric_limits<float>::epsilon, COMDAT

; 884  :     _NODISCARD static constexpr float epsilon() noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?epsilon@?$numeric_limits@M@std@@SAMXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __CDF80030_limits
	call	@__CheckForDebuggerJustMyCode@4

; 885  :         return FLT_EPSILON;

	fld	DWORD PTR __real@34000000

; 886  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?epsilon@?$numeric_limits@M@std@@SAMXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?epsilon@?$numeric_limits@M@std@@SAMXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?epsilon@?$numeric_limits@M@std@@SAMXZ ENDP		; std::numeric_limits<float>::epsilon
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __09340588_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 765  :             return (float)tan(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]

; 766  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tanf	ENDP
_TEXT	ENDS
END
