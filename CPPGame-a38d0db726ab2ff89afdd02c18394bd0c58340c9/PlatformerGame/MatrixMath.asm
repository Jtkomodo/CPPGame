; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28315.0 

	TITLE	D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\MatrixMath.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__BD3EDE1B_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__EC2FBCF1_cstdlib DB 01H
__4877352E_type_traits DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__CDF80030_limits DB 01H
__C0436A37_cmath DB 01H
__8FA2E757_func_common@inl DB 01H
__2516A53F_MatrixMath@cpp DB 01H
__05392703_type_vec3@inl DB 01H
__C4BB2EA4_type_vec3@hpp DB 01H
__87ADDF22_type_mat4x4@inl DB 01H
__5E861261_matrix_transform@inl DB 01H
__D322B372_func_trigonometric@inl DB 01H
__B719FB13_type_vec4@inl DB 01H
__769BF2B4_type_vec4@hpp DB 01H
__9F274F2F_func_geometric@inl DB 01H
__462FD685_type_mat4x4@hpp DB 01H
__04C18A9B_func_exponential@inl DB 01H
msvcjmc	ENDS
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?getmatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0M@Z ; getmatrix
PUBLIC	?getViewMatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0@Z ; getViewMatrix
PUBLIC	?length@?$vec@$03M$0A@@glm@@SAHXZ		; glm::vec<4,float,0>::length
PUBLIC	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z		; glm::vec<4,float,0>::operator[]
PUBLIC	??0?$vec@$03M$0A@@glm@@QAE@M@Z			; glm::vec<4,float,0>::vec<4,float,0>
PUBLIC	??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z		; glm::vec<4,float,0>::vec<4,float,0>
PUBLIC	?length@?$mat@$03$03M$0A@@glm@@SAHXZ		; glm::mat<4,4,float,0>::length
PUBLIC	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
PUBLIC	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
PUBLIC	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z		; glm::mat<4,4,float,0>::mat<4,4,float,0>
PUBLIC	?length@?$vec@$02M$0A@@glm@@SAHXZ		; glm::vec<3,float,0>::length
PUBLIC	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z		; glm::vec<3,float,0>::operator[]
PUBLIC	??A?$vec@$02M$0A@@glm@@QBEABMH@Z		; glm::vec<3,float,0>::operator[]
PUBLIC	??0?$vec@$02M$0A@@glm@@QAE@M@Z			; glm::vec<3,float,0>::vec<3,float,0>
PUBLIC	??0?$vec@$02M$0A@@glm@@QAE@MMM@Z		; glm::vec<3,float,0>::vec<3,float,0>
PUBLIC	??$translate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z ; glm::translate<float,0>
PUBLIC	??$radians@M@glm@@YAMM@Z			; glm::radians<float>
PUBLIC	??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z		; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
PUBLIC	??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ; glm::rotate<float,0>
PUBLIC	??$scale@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z ; glm::scale<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z	; glm::operator-<float,0>
PUBLIC	??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z	; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z	; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z	; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z	; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$normalize@$02M$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z ; glm::normalize<3,float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MABU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z		; glm::vec<4,float,0>::operator*=<float>
PUBLIC	??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::vec<4,float,0>::operator+=<float>
PUBLIC	?call@?$compute_normalize@$02M$0A@$0A@@detail@glm@@SA?AU?$vec@$02M$0A@@3@ABU43@@Z ; glm::detail::compute_normalize<3,float,0,0>::call
PUBLIC	??$dot@$02M$0A@@glm@@YAMABU?$vec@$02M$0A@@0@0@Z	; glm::dot<3,float,0>
PUBLIC	??$inversesqrt@M@glm@@YAMM@Z			; glm::inversesqrt<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMABU?$vec@$02M$0A@@3@0@Z ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@0@Z	; glm::operator*<float,0>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1BHE@MGBAAAOM@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ ; `string'
PUBLIC	??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___wassert:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
CONST	SEGMENT
??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'C', 00H, 'P', 00H, 'P', 00H, 'G', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, '-', 00H, 'a', 00H, '3', 00H, '8', 00H, 'd', 00H, '0'
	DB	00H, 'd', 00H, 'b', 00H, '7', 00H, '2', 00H, '6', 00H, 'a', 00H
	DB	'b', 00H, '2', 00H, 'f', 00H, 'f', 00H, '8', 00H, '9', 00H, 'a'
	DB	00H, 'f', 00H, 'd', 00H, 'd', 00H, '0', 00H, '2', 00H, 'c', 00H
	DB	'1', 00H, '8', 00H, '3', 00H, '9', 00H, '4', 00H, 'b', 00H, 'd'
	DB	00H, '0', 00H, 'c', 00H, '5', 00H, '8', 00H, '3', 00H, '4', 00H
	DB	'0', 00H, 'c', 00H, '9', 00H, '\', 00H, 'C', 00H, 'P', 00H, 'P'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, 'a', 00H
	DB	'3', 00H, '8', 00H, 'd', 00H, '0', 00H, 'd', 00H, 'b', 00H, '7'
	DB	00H, '2', 00H, '6', 00H, 'a', 00H, 'b', 00H, '2', 00H, 'f', 00H
	DB	'f', 00H, '8', 00H, '9', 00H, 'a', 00H, 'f', 00H, 'd', 00H, 'd'
	DB	00H, '0', 00H, '2', 00H, 'c', 00H, '1', 00H, '8', 00H, '3', 00H
	DB	'9', 00H, '4', 00H, 'b', 00H, 'd', 00H, '0', 00H, 'c', 00H, '5'
	DB	00H, '8', 00H, '3', 00H, '4', 00H, '0', 00H, 'c', 00H, '9', 00H
	DB	'\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'G', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'E', 00H, 'n', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'H', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'm', 00H, 'a', 00H, 't', 00H, '4', 00H, 'x', 00H, '4'
	DB	00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
CONST	SEGMENT
??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'C', 00H, 'P', 00H, 'P', 00H, 'G', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, '-', 00H, 'a', 00H, '3', 00H, '8', 00H, 'd', 00H, '0'
	DB	00H, 'd', 00H, 'b', 00H, '7', 00H, '2', 00H, '6', 00H, 'a', 00H
	DB	'b', 00H, '2', 00H, 'f', 00H, 'f', 00H, '8', 00H, '9', 00H, 'a'
	DB	00H, 'f', 00H, 'd', 00H, 'd', 00H, '0', 00H, '2', 00H, 'c', 00H
	DB	'1', 00H, '8', 00H, '3', 00H, '9', 00H, '4', 00H, 'b', 00H, 'd'
	DB	00H, '0', 00H, 'c', 00H, '5', 00H, '8', 00H, '3', 00H, '4', 00H
	DB	'0', 00H, 'c', 00H, '9', 00H, '\', 00H, 'C', 00H, 'P', 00H, 'P'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, 'a', 00H
	DB	'3', 00H, '8', 00H, 'd', 00H, '0', 00H, 'd', 00H, 'b', 00H, '7'
	DB	00H, '2', 00H, '6', 00H, 'a', 00H, 'b', 00H, '2', 00H, 'f', 00H
	DB	'f', 00H, '8', 00H, '9', 00H, 'a', 00H, 'f', 00H, 'd', 00H, 'd'
	DB	00H, '0', 00H, '2', 00H, 'c', 00H, '1', 00H, '8', 00H, '3', 00H
	DB	'9', 00H, '4', 00H, 'b', 00H, 'd', 00H, '0', 00H, 'c', 00H, '5'
	DB	00H, '8', 00H, '3', 00H, '4', 00H, '0', 00H, 'c', 00H, '9', 00H
	DB	'\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'G', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'E', 00H, 'n', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'H', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '4', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHE@MGBAAAOM@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
CONST	SEGMENT
??_C@_1BHE@MGBAAAOM@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'C', 00H, 'P', 00H, 'P', 00H, 'G', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, '-', 00H, 'a', 00H, '3', 00H, '8', 00H, 'd', 00H, '0'
	DB	00H, 'd', 00H, 'b', 00H, '7', 00H, '2', 00H, '6', 00H, 'a', 00H
	DB	'b', 00H, '2', 00H, 'f', 00H, 'f', 00H, '8', 00H, '9', 00H, 'a'
	DB	00H, 'f', 00H, 'd', 00H, 'd', 00H, '0', 00H, '2', 00H, 'c', 00H
	DB	'1', 00H, '8', 00H, '3', 00H, '9', 00H, '4', 00H, 'b', 00H, 'd'
	DB	00H, '0', 00H, 'c', 00H, '5', 00H, '8', 00H, '3', 00H, '4', 00H
	DB	'0', 00H, 'c', 00H, '9', 00H, '\', 00H, 'C', 00H, 'P', 00H, 'P'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, 'a', 00H
	DB	'3', 00H, '8', 00H, 'd', 00H, '0', 00H, 'd', 00H, 'b', 00H, '7'
	DB	00H, '2', 00H, '6', 00H, 'a', 00H, 'b', 00H, '2', 00H, 'f', 00H
	DB	'f', 00H, '8', 00H, '9', 00H, 'a', 00H, 'f', 00H, 'd', 00H, 'd'
	DB	00H, '0', 00H, '2', 00H, 'c', 00H, '1', 00H, '8', 00H, '3', 00H
	DB	'9', 00H, '4', 00H, 'b', 00H, 'd', 00H, '0', 00H, 'c', 00H, '5'
	DB	00H, '8', 00H, '3', 00H, '4', 00H, '0', 00H, 'c', 00H, '9', 00H
	DB	'\', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'G', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\'
	DB	00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'E', 00H, 'n', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'H', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '3', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?sqrt@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?sin@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?cos@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 707  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 708  : 		return vec<3, T, Q>(

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$02M$0A@@glm@@QAE@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 709  : 			v1.x * v2.x,
; 710  : 			v1.y * v2.y,
; 711  : 			v1.z * v2.z);
; 712  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMABU?$vec@$02M$0A@@3@0@Z
_TEXT	SEGMENT
tv75 = -220						; size = 4
_tmp$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMABU?$vec@$02M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call, COMDAT

; 51   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9F274F2F_func_geometric@inl
	call	@__CheckForDebuggerJustMyCode@4

; 52   : 			vec<3, T, Q> tmp(a * b);

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@0@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH

; 53   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR _tmp$[ebp]
	addss	xmm0, DWORD PTR _tmp$[ebp+4]
	addss	xmm0, DWORD PTR _tmp$[ebp+8]
	movss	DWORD PTR tv75[ebp], xmm0
	fld	DWORD PTR tv75[ebp]

; 54   : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@call
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@call:
	DD	1
	DD	$LN4@call
$LN4@call:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@call
$LN3@call:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMABU?$vec@$02M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 12   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 13   : 			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z	; glm::vec<4,float,0>::vec<4,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 14   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 30   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 31   : 			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z	; glm::vec<4,float,0>::vec<4,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 32   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 671  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 672  : 		return vec<3, T, Q>(

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _scalar$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$02M$0A@@glm@@QAE@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 673  : 			v.x * scalar,
; 674  : 			v.y * scalar,
; 675  : 			v.z * scalar);
; 676  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMM@Z
_TEXT	SEGMENT
tv77 = -200						; size = 4
tv74 = -196						; size = 4
_x$ = 8							; size = 4
??$inversesqrt@M@glm@@YAMM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __04C18A9B_func_exponential@inl
	call	@__CheckForDebuggerJustMyCode@4

; 138  : 		return static_cast<genType>(1) / sqrt(x);

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv74[ebp]
	movss	DWORD PTR tv77[ebp], xmm0
	fld	DWORD PTR tv77[ebp]

; 139  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$inversesqrt@M@glm@@YAMM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_geometric.inl
;	COMDAT ??$dot@$02M$0A@@glm@@YAMABU?$vec@$02M$0A@@0@0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@$02M$0A@@glm@@YAMABU?$vec@$02M$0A@@0@0@Z PROC	; glm::dot<3,float,0>, COMDAT

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9F274F2F_func_geometric@inl
	call	@__CheckForDebuggerJustMyCode@4

; 169  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 170  : 		return detail::compute_dot<vec<L, T, Q>, T, detail::is_aligned<Q>::value>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMABU?$vec@$02M$0A@@3@0@Z ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
	add	esp, 8

; 171  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@$02M$0A@@glm@@YAMABU?$vec@$02M$0A@@0@0@Z ENDP	; glm::dot<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_normalize@$02M$0A@$0A@@detail@glm@@SA?AU?$vec@$02M$0A@@3@ABU43@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?call@?$compute_normalize@$02M$0A@$0A@@detail@glm@@SA?AU?$vec@$02M$0A@@3@ABU43@@Z PROC ; glm::detail::compute_normalize<3,float,0,0>::call, COMDAT

; 85   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9F274F2F_func_geometric@inl
	call	@__CheckForDebuggerJustMyCode@4

; 86   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 87   : 
; 88   : 			return v * inversesqrt(dot(v, v));

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	??$dot@$02M$0A@@glm@@YAMABU?$vec@$02M$0A@@0@0@Z ; glm::dot<3,float,0>
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	??$inversesqrt@M@glm@@YAMM@Z		; glm::inversesqrt<float>
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@M@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 89   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_normalize@$02M$0A@$0A@@detail@glm@@SA?AU?$vec@$02M$0A@@3@ABU43@@Z ENDP ; glm::detail::compute_normalize<3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
$T1 = -248						; size = 16
$T2 = -224						; size = 16
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z PROC	; glm::vec<4,float,0>::operator+=<float>, COMDAT
; _this$ = ecx

; 554  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 555  : 		return (*this = detail::compute_vec4_add<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T2[ebp+12], edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]

; 556  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP	; glm::vec<4,float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z
_TEXT	SEGMENT
$T1 = -248						; size = 16
$T2 = -224						; size = 16
_this$ = -8						; size = 4
_scalar$ = 8						; size = 4
??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z PROC		; glm::vec<4,float,0>::operator*=<float>, COMDAT
; _this$ = ecx

; 582  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 583  : 		return (*this = detail::compute_vec4_mul<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));

	push	ecx
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$vec@$03M$0A@@glm@@QAE@M@Z		; glm::vec<4,float,0>::vec<4,float,0>
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$vec@$03M$0A@@3@ABU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR _this$[ebp]

; 584  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z ENDP		; glm::vec<4,float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_scalar$ = 12						; size = 4
_v$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MABU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 689  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 690  : 		return vec<3, T, Q>(

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$02M$0A@@glm@@QAE@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 691  : 			scalar * v.x,
; 692  : 			scalar * v.y,
; 693  : 			scalar * v.z);
; 694  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MABU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_geometric.inl
;	COMDAT ??$normalize@$02M$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$normalize@$02M$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z PROC ; glm::normalize<3,float,0>, COMDAT

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9F274F2F_func_geometric@inl
	call	@__CheckForDebuggerJustMyCode@4

; 192  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 193  : 
; 194  : 		return detail::compute_normalize<L, T, Q, detail::is_aligned<Q>::value>::call(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	?call@?$compute_normalize@$02M$0A@$0A@@detail@glm@@SA?AU?$vec@$02M$0A@@3@ABU43@@Z ; glm::detail::compute_normalize<3,float,0,0>::call
	add	esp, 8
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 195  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@$02M$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z ENDP ; glm::normalize<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
$T1 = -212						; size = 16
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 829  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 830  : 		return vec<4, T, Q>(v1) += v2;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp+12], edx
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??$?YM@?$vec@$03M$0A@@glm@@QAEAAU01@ABU01@@Z ; glm::vec<4,float,0>::operator+=<float>
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 831  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z
_TEXT	SEGMENT
$T1 = -212						; size = 16
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z PROC	; glm::operator*<float,0>, COMDAT

; 865  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 866  : 		return vec<4, T, Q>(v) *= scalar;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp+12], edx
	mov	eax, DWORD PTR _scalar$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??$?XM@?$vec@$03M$0A@@glm@@QAEAAU01@M@Z	; glm::vec<4,float,0>::operator*=<float>
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 867  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	cvtsi2ss xmm0, DWORD PTR __x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	cvtsi2ss xmm0, DWORD PTR __y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	cvtsi2ss xmm0, DWORD PTR __z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __w$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	cvtsi2ss xmm0, DWORD PTR __x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	cvtsi2ss xmm0, DWORD PTR __y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	cvtsi2ss xmm0, DWORD PTR __w$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	cvtsi2ss xmm0, DWORD PTR __x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	cvtsi2ss xmm0, DWORD PTR __z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	cvtsi2ss xmm0, DWORD PTR __w$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z PROC		; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>, COMDAT
; _this$ = ecx

; 182  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 178  : 		: x(static_cast<T>(_x))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 179  : 		, y(static_cast<T>(_y))

	cvtsi2ss xmm0, DWORD PTR __y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 180  : 		, z(static_cast<T>(_z))

	cvtsi2ss xmm0, DWORD PTR __z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 181  : 		, w(static_cast<T>(_w))

	cvtsi2ss xmm0, DWORD PTR __w$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 182  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z ENDP		; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 570  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 571  : 		return vec<3, T, Q>(

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vec@$02M$0A@@glm@@QAE@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 572  : 			-v.x,
; 573  : 			-v.y,
; 574  : 			-v.z);
; 575  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_transform.inl
;	COMDAT ??$scale@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -336						; size = 16
$T2 = -312						; size = 16
$T3 = -288						; size = 16
_Result$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??$scale@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z PROC ; glm::scale<float,0>, COMDAT

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5E861261_matrix_transform@inl
	call	@__CheckForDebuggerJustMyCode@4

; 80   : 		mat<4, 4, T, Q> Result;
; 81   : 		Result[0] = m[0] * v[0];

	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QBEABMH@Z	; glm::vec<3,float,0>::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx

; 82   : 		Result[1] = m[1] * v[1];

	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QBEABMH@Z	; glm::vec<3,float,0>::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx

; 83   : 		Result[2] = m[2] * v[2];

	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QBEABMH@Z	; glm::vec<3,float,0>::operator[]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx

; 84   : 		Result[3] = m[3];

	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	esi, eax
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx

; 85   : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@scale
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@scale:
	DD	1
	DD	$LN4@scale
$LN4@scale:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN3@scale
$LN3@scale:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$scale@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z ENDP ; glm::scale<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_transform.inl
;	COMDAT ??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z
_TEXT	SEGMENT
tv637 = -976						; size = 4
tv633 = -976						; size = 4
tv629 = -976						; size = 4
tv623 = -976						; size = 4
tv619 = -976						; size = 4
tv615 = -976						; size = 4
tv639 = -972						; size = 4
tv635 = -972						; size = 4
tv631 = -972						; size = 4
tv627 = -972						; size = 4
tv625 = -972						; size = 4
tv621 = -972						; size = 4
tv617 = -972						; size = 4
tv613 = -972						; size = 4
tv611 = -972						; size = 4
$T1 = -964						; size = 16
$T2 = -940						; size = 16
$T3 = -916						; size = 16
$T4 = -892						; size = 16
$T5 = -868						; size = 16
$T6 = -844						; size = 16
$T7 = -820						; size = 16
$T8 = -796						; size = 16
$T9 = -772						; size = 16
$T10 = -748						; size = 16
$T11 = -724						; size = 16
$T12 = -700						; size = 16
$T13 = -676						; size = 16
$T14 = -652						; size = 16
$T15 = -628						; size = 16
_Result$ = -220						; size = 64
_Rotate$ = -148						; size = 64
_temp$ = -76						; size = 12
_axis$ = -56						; size = 12
_s$ = -36						; size = 4
_c$ = -24						; size = 4
_a$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_angle$ = 16						; size = 4
_v$ = 20						; size = 4
??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z PROC ; glm::rotate<float,0>, COMDAT

; 19   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 976				; 000003d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-976]
	mov	ecx, 244				; 000000f4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5E861261_matrix_transform@inl
	call	@__CheckForDebuggerJustMyCode@4

; 20   : 		T const a = angle;

	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR _a$[ebp], xmm0

; 21   : 		T const c = cos(a);

	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _c$[ebp]

; 22   : 		T const s = sin(a);

	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _s$[ebp]

; 23   : 
; 24   : 		vec<3, T, Q> axis(normalize(v));

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axis$[ebp]
	push	ecx
	call	??$normalize@$02M$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z ; glm::normalize<3,float,0>
	add	esp, 8

; 25   : 		vec<3, T, Q> temp((T(1) - c) * axis);

	lea	eax, DWORD PTR _axis$[ebp]
	push	eax
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _c$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MABU10@@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH

; 26   : 
; 27   : 		mat<4, 4, T, Q> Rotate;
; 28   : 		Rotate[0][0] = c + temp[0] * axis[0];

	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _c$[ebp]
	push	0
	push	0
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv611[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv611[ebp]
	movss	DWORD PTR [eax], xmm0

; 29   : 		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];

	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	lea	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv613[ebp], xmm0
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv613[ebp]
	addss	xmm1, xmm0
	push	1
	push	0
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv615[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv615[ebp]
	movss	DWORD PTR [eax], xmm0

; 30   : 		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];

	push	0
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	lea	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv617[ebp], xmm0
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv617[ebp]
	subss	xmm1, xmm0
	push	2
	push	0
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv619[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv619[ebp]
	movss	DWORD PTR [eax], xmm0

; 31   : 
; 32   : 		Rotate[1][0] = temp[1] * axis[0] - s * axis[2];

	push	1
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	lea	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv621[ebp], xmm0
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv621[ebp]
	subss	xmm1, xmm0
	push	0
	push	1
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv623[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv623[ebp]
	movss	DWORD PTR [eax], xmm0

; 33   : 		Rotate[1][1] = c + temp[1] * axis[1];

	push	1
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _c$[ebp]
	push	1
	push	1
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv625[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv625[ebp]
	movss	DWORD PTR [eax], xmm0

; 34   : 		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];

	push	1
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	lea	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv627[ebp], xmm0
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv627[ebp]
	addss	xmm1, xmm0
	push	2
	push	1
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv629[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv629[ebp]
	movss	DWORD PTR [eax], xmm0

; 35   : 
; 36   : 		Rotate[2][0] = temp[2] * axis[0] + s * axis[1];

	push	2
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	lea	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv631[ebp], xmm0
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv631[ebp]
	addss	xmm1, xmm0
	push	0
	push	2
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv633[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv633[ebp]
	movss	DWORD PTR [eax], xmm0

; 37   : 		Rotate[2][1] = temp[2] * axis[1] - s * axis[0];

	push	2
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	lea	ecx, DWORD PTR _axis$[ebp]
	movss	DWORD PTR tv635[ebp], xmm0
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv635[ebp]
	subss	xmm1, xmm0
	push	1
	push	2
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv637[ebp], xmm1
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv637[ebp]
	movss	DWORD PTR [eax], xmm0

; 38   : 		Rotate[2][2] = c + temp[2] * axis[2];

	push	2
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _axis$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QAEAAMH@Z	; glm::vec<3,float,0>::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _c$[ebp]
	push	2
	push	2
	lea	ecx, DWORD PTR _Rotate$[ebp]
	movss	DWORD PTR tv639[ebp], xmm0
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	movss	xmm0, DWORD PTR tv639[ebp]
	movss	DWORD PTR [eax], xmm0

; 39   : 
; 40   : 		mat<4, 4, T, Q> Result;
; 41   : 		Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];

	push	2
	push	0
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	push	0
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR $T14[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR $T13[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx

; 42   : 		Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];

	push	2
	push	1
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	push	1
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx

; 43   : 		Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];

	push	2
	push	2
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	push	2
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	push	2
	lea	ecx, DWORD PTR _Rotate$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, eax
	call	??A?$vec@$03M$0A@@glm@@QAEAAMH@Z	; glm::vec<4,float,0>::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx

; 44   : 		Result[3] = m[3];

	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	esi, eax
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx

; 45   : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 46   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@rotate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 976				; 000003d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@rotate:
	DD	4
	DD	$LN7@rotate
$LN7@rotate:
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN3@rotate
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN4@rotate
	DD	-148					; ffffff6cH
	DD	64					; 00000040H
	DD	$LN5@rotate
	DD	-220					; ffffff24H
	DD	64					; 00000040H
	DD	$LN6@rotate
$LN6@rotate:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN5@rotate:
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN4@rotate:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN3@rotate:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ENDP ; glm::rotate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z PROC		; glm::vec<3,float,0>::vec<3,float,0><int,int,int>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 54   : 		: x(static_cast<T>(_x))

	cvtsi2ss xmm0, DWORD PTR __x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 55   : 		, y(static_cast<T>(_y))

	cvtsi2ss xmm0, DWORD PTR __y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 56   : 		, z(static_cast<T>(_z))

	cvtsi2ss xmm0, DWORD PTR __z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 57   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z ENDP		; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\func_trigonometric.inl
;	COMDAT ??$radians@M@glm@@YAMM@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
_degrees$ = 8						; size = 4
??$radians@M@glm@@YAMM@Z PROC				; glm::radians<float>, COMDAT

; 10   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D322B372_func_trigonometric@inl
	call	@__CheckForDebuggerJustMyCode@4

; 11   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'radians' only accept floating-point input");
; 12   : 
; 13   : 		return degrees * static_cast<genType>(0.01745329251994329576923690768489);

	movss	xmm0, DWORD PTR _degrees$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 14   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$radians@M@glm@@YAMM@Z ENDP				; glm::radians<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\ext\matrix_transform.inl
;	COMDAT ??$translate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -408						; size = 16
$T2 = -384						; size = 16
$T3 = -360						; size = 16
$T4 = -336						; size = 16
$T5 = -312						; size = 16
$T6 = -288						; size = 16
_Result$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??$translate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z PROC ; glm::translate<float,0>, COMDAT

; 11   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5E861261_matrix_transform@inl
	call	@__CheckForDebuggerJustMyCode@4

; 12   : 		mat<4, 4, T, Q> Result(m);

	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _m$[ebp]
	lea	edi, DWORD PTR _Result$[ebp]
	rep movsd

; 13   : 		Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];

	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	push	2
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QBEABMH@Z	; glm::vec<3,float,0>::operator[]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QBEABMH@Z	; glm::vec<3,float,0>::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$vec@$02M$0A@@glm@@QBEABMH@Z	; glm::vec<3,float,0>::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	push	eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$?HM$0A@@glm@@YA?AU?$vec@$03M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ; glm::mat<4,4,float,0>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx

; 14   : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 15   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@translate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@translate:
	DD	1
	DD	$LN4@translate
$LN4@translate:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN3@translate
$LN3@translate:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$translate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z ENDP ; glm::translate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??0?$vec@$02M$0A@@glm@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0?$vec@$02M$0A@@glm@@QAE@MMM@Z PROC			; glm::vec<3,float,0>::vec<3,float,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 38   : 		: x(_x), y(_y), z(_z)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 39   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$vec@$02M$0A@@glm@@QAE@MMM@Z ENDP			; glm::vec<3,float,0>::vec<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??0?$vec@$02M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scalar$ = 8						; size = 4
??0?$vec@$02M$0A@@glm@@QAE@M@Z PROC			; glm::vec<3,float,0>::vec<3,float,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 33   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 34   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$vec@$02M$0A@@glm@@QAE@M@Z ENDP			; glm::vec<3,float,0>::vec<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??A?$vec@$02M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$vec@$02M$0A@@glm@@QBEABMH@Z PROC			; glm::vec<3,float,0>::operator[], COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 186  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN8@operator
	call	?length@?$vec@$02M$0A@@glm@@SAHXZ	; glm::vec<3,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN9@operator
$LN8@operator:
	mov	esi, esp
	push	186					; 000000baH
	push	OFFSET ??_C@_1BHE@MGBAAAOM@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@operator:

; 187  : 		switch(i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv71[ebp], 2
	je	SHORT $LN6@operator

; 188  : 		{
; 189  : 		default:
; 190  : 		case 0:
; 191  : 			return x;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:

; 192  : 		case 1:
; 193  : 			return y;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:

; 194  : 		case 2:
; 195  : 			return z;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
$LN1@operator:

; 196  : 		}
; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vec@$02M$0A@@glm@@QBEABMH@Z ENDP			; glm::vec<3,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.inl
;	COMDAT ??A?$vec@$02M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$vec@$02M$0A@@glm@@QAEAAMH@Z PROC			; glm::vec<3,float,0>::operator[], COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __05392703_type_vec3@inl
	call	@__CheckForDebuggerJustMyCode@4

; 170  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN8@operator
	call	?length@?$vec@$02M$0A@@glm@@SAHXZ	; glm::vec<3,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN9@operator
$LN8@operator:
	mov	esi, esp
	push	170					; 000000aaH
	push	OFFSET ??_C@_1BHE@MGBAAAOM@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@operator:

; 171  : 		switch(i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv71[ebp], 2
	je	SHORT $LN6@operator

; 172  : 		{
; 173  : 		default:
; 174  : 			case 0:
; 175  : 		return x;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:

; 176  : 			case 1:
; 177  : 		return y;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:

; 178  : 			case 2:
; 179  : 		return z;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
$LN1@operator:

; 180  : 		}
; 181  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vec@$02M$0A@@glm@@QAEAAMH@Z ENDP			; glm::vec<3,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$vec@$02M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$vec@$02M$0A@@glm@@SAHXZ PROC			; glm::vec<3,float,0>::length, COMDAT

; 91   : 		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 3;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4BB2EA4_type_vec3@hpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 3
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$vec@$02M$0A@@glm@@SAHXZ ENDP			; glm::vec<3,float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = 8							; size = 4
??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z PROC		; glm::mat<4,4,float,0>::mat<4,4,float,0>, COMDAT
; _this$ = ecx

; 43   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __87ADDF22_type_mat4x4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 41   : 			: value{col_type(s, 0, 0, 0), col_type(0, s, 0, 0), col_type(0, 0, s, 0), col_type(0, 0, 0, s)}

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0MHHH@?$vec@$03M$0A@@glm@@QAE@MHHH@Z ; glm::vec<4,float,0>::vec<4,float,0><float,int,int,int>
	push	0
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??$?0HMHH@?$vec@$03M$0A@@glm@@QAE@HMHH@Z ; glm::vec<4,float,0>::vec<4,float,0><int,float,int,int>
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??$?0HHMH@?$vec@$03M$0A@@glm@@QAE@HHMH@Z ; glm::vec<4,float,0>::vec<4,float,0><int,int,float,int>
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??$?0HHHM@?$vec@$03M$0A@@glm@@QAE@HHHM@Z ; glm::vec<4,float,0>::vec<4,float,0><int,int,int,float>

; 44   : #		if !GLM_HAS_INITIALIZER_LISTS
; 45   : 			this->value[0] = col_type(s, 0, 0, 0);
; 46   : 			this->value[1] = col_type(0, s, 0, 0);
; 47   : 			this->value[2] = col_type(0, 0, s, 0);
; 48   : 			this->value[3] = col_type(0, 0, 0, s);
; 49   : #		endif
; 50   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z ENDP		; glm::mat<4,4,float,0>::mat<4,4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z PROC ; glm::mat<4,4,float,0>::operator[], COMDAT
; _this$ = ecx

; 297  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __87ADDF22_type_mat4x4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 298  : 		assert(i < this->length());

	call	?length@?$mat@$03$03M$0A@@glm@@SAHXZ	; glm::mat<4,4,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN3@operator
	mov	esi, esp
	push	298					; 0000012aH
	push	OFFSET ??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator:

; 299  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 300  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$mat@$03$03M$0A@@glm@@QBEABU?$vec@$03M$0A@@1@H@Z ENDP ; glm::mat<4,4,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z PROC ; glm::mat<4,4,float,0>::operator[], COMDAT
; _this$ = ecx

; 290  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __87ADDF22_type_mat4x4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 291  : 		assert(i < this->length());

	call	?length@?$mat@$03$03M$0A@@glm@@SAHXZ	; glm::mat<4,4,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN3@operator
	mov	esi, esp
	push	291					; 00000123H
	push	OFFSET ??_C@_1BHI@BJHAPLJJ@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator:

; 292  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 293  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$mat@$03$03M$0A@@glm@@QAEAAU?$vec@$03M$0A@@1@H@Z ENDP ; glm::mat<4,4,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$mat@$03$03M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$mat@$03$03M$0A@@glm@@SAHXZ PROC		; glm::mat<4,4,float,0>::length, COMDAT

; 28   : 		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __462FD685_type_mat4x4@hpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$mat@$03$03M$0A@@glm@@SAHXZ ENDP		; glm::mat<4,4,float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z PROC			; glm::vec<4,float,0>::vec<4,float,0>, COMDAT
; _this$ = ecx

; 162  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 161  : 		: x(_x), y(_y), z(_z), w(_w)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __w$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 162  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$vec@$03M$0A@@glm@@QAE@MMMM@Z ENDP			; glm::vec<4,float,0>::vec<4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??0?$vec@$03M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scalar$ = 8						; size = 4
??0?$vec@$03M$0A@@glm@@QAE@M@Z PROC			; glm::vec<4,float,0>::vec<4,float,0>, COMDAT
; _this$ = ecx

; 157  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 156  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _scalar$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 157  : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$vec@$03M$0A@@glm@@QAE@M@Z ENDP			; glm::vec<4,float,0>::vec<4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.inl
;	COMDAT ??A?$vec@$03M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$vec@$03M$0A@@glm@@QAEAAMH@Z PROC			; glm::vec<4,float,0>::operator[], COMDAT
; _this$ = ecx

; 478  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B719FB13_type_vec4@inl
	call	@__CheckForDebuggerJustMyCode@4

; 479  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN9@operator
	call	?length@?$vec@$03M$0A@@glm@@SAHXZ	; glm::vec<4,float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN10@operator
$LN9@operator:
	mov	esi, esp
	push	479					; 000001dfH
	push	OFFSET ??_C@_1BHE@LCIIOJGD@?$AAD?$AA?3?$AA?2?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAe?$AAr?$AA?2?$AAC@
	push	OFFSET ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@operator:

; 480  : 		switch(i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv71[ebp], 2
	je	SHORT $LN6@operator
	cmp	DWORD PTR tv71[ebp], 3
	je	SHORT $LN7@operator

; 481  : 		{
; 482  : 		default:
; 483  : 		case 0:
; 484  : 			return x;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:

; 485  : 		case 1:
; 486  : 			return y;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:

; 487  : 		case 2:
; 488  : 			return z;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	jmp	SHORT $LN1@operator
$LN7@operator:

; 489  : 		case 3:
; 490  : 			return w;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
$LN1@operator:

; 491  : 		}
; 492  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vec@$03M$0A@@glm@@QAEAAMH@Z ENDP			; glm::vec<4,float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\HeaderFiles\Vendor\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$vec@$03M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$vec@$03M$0A@@glm@@SAHXZ PROC			; glm::vec<4,float,0>::length, COMDAT

; 90   : 		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __769BF2B4_type_vec4@hpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$vec@$03M$0A@@glm@@SAHXZ ENDP			; glm::vec<4,float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\MatrixMath.cpp
;	COMDAT ?getViewMatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0@Z
_TEXT	SEGMENT
$T1 = -644						; size = 64
$T2 = -572						; size = 12
$T3 = -552						; size = 64
$T4 = -480						; size = 12
$T5 = -460						; size = 64
$T6 = -388						; size = 12
$T7 = -368						; size = 64
$T8 = -296						; size = 12
$T9 = -276						; size = 4
_i$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_position$ = 12						; size = 12
_angle$ = 24						; size = 12
?getViewMatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0@Z PROC ; getViewMatrix, COMDAT

; 31   : glm::mat4 getViewMatrix(glm::vec3 position, glm::vec3 angle) {

	push	ebp
	mov	ebp, esp
	sub	esp, 648				; 00000288H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-648]
	mov	ecx, 162				; 000000a2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2516A53F_MatrixMath@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 32   : 
; 33   : 
; 34   : 	glm::mat4 i = glm::mat4(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[ebp], xmm0
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp]
	call	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z	; glm::mat<4,4,float,0>::mat<4,4,float,0>

; 35   : 	
; 36   : 
; 37   : 
; 38   : 
; 39   : 	i = glm::rotate(i, glm::radians(-angle.x), glm::vec3(1, 0, 0));

	push	0
	push	0
	push	1
	lea	ecx, DWORD PTR $T8[ebp]
	call	??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z	; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
	push	eax
	movss	xmm0, DWORD PTR _angle$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ; glm::rotate<float,0>
	add	esp, 16					; 00000010H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 40   : 	i = glm::rotate(i, glm::radians(-angle.y), glm::vec3(0, 1, 0));

	push	0
	push	1
	push	0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z	; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
	push	eax
	movss	xmm0, DWORD PTR _angle$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ; glm::rotate<float,0>
	add	esp, 16					; 00000010H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 41   : 	i = glm::rotate(i, glm::radians(-angle.z), glm::vec3(0, 0, 1));

	push	1
	push	0
	push	0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z	; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
	push	eax
	movss	xmm0, DWORD PTR _angle$[ebp+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ; glm::rotate<float,0>
	add	esp, 16					; 00000010H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 42   : 
; 43   : 	i = glm::translate(i, -position);

	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@ABU10@@Z ; glm::operator-<float,0>
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$translate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z ; glm::translate<float,0>
	add	esp, 12					; 0000000cH
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 44   : 
; 45   : 
; 46   : 	return i;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 47   : 
; 48   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@getViewMat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 648				; 00000288H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@getViewMat:
	DD	1
	DD	$LN4@getViewMat
$LN4@getViewMat:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN3@getViewMat
$LN3@getViewMat:
	DB	105					; 00000069H
	DB	0
?getViewMatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0@Z ENDP ; getViewMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Platformer\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\CPPGame-a38d0db726ab2ff89afdd02c18394bd0c58340c9\PlatformerGame\src\GameEngine\MatrixMath.cpp
;	COMDAT ?getmatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0M@Z
_TEXT	SEGMENT
$T1 = -908						; size = 64
$T2 = -836						; size = 12
$T3 = -816						; size = 64
$T4 = -744						; size = 12
$T5 = -724						; size = 64
$T6 = -652						; size = 12
$T7 = -632						; size = 64
$T8 = -560						; size = 12
$T9 = -540						; size = 64
$T10 = -468						; size = 4
_i$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_position$ = 12						; size = 12
_angle$ = 24						; size = 12
_scale$ = 36						; size = 4
?getmatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0M@Z PROC ; getmatrix, COMDAT

; 5    : glm::mat4 getmatrix(glm::vec3 position, glm::vec3 angle, float scale) {

	push	ebp
	mov	ebp, esp
	sub	esp, 912				; 00000390H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-912]
	mov	ecx, 228				; 000000e4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2516A53F_MatrixMath@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 6    : 
; 7    : 
; 8    : 	glm::mat4 i = glm::mat4(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T10[ebp], xmm0
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp]
	call	??0?$mat@$03$03M$0A@@glm@@QAE@ABM@Z	; glm::mat<4,4,float,0>::mat<4,4,float,0>

; 9    : 	i = glm::translate(i,position);

	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	call	??$translate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z ; glm::translate<float,0>
	add	esp, 12					; 0000000cH
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 10   : 
; 11   : 
; 12   : 
; 13   : 	i = glm::rotate(i, glm::radians(angle.x), glm::vec3(1, 0, 0));

	push	0
	push	0
	push	1
	lea	ecx, DWORD PTR $T8[ebp]
	call	??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z	; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ; glm::rotate<float,0>
	add	esp, 16					; 00000010H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 14   : 	i = glm::rotate(i, glm::radians(angle.y), glm::vec3(0, 1, 0));

	push	0
	push	1
	push	0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z	; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ; glm::rotate<float,0>
	add	esp, 16					; 00000010H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 15   : 	i = glm::rotate(i, glm::radians(angle.z), glm::vec3(0, 0, 1));

	push	1
	push	0
	push	0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??$?0HHH@?$vec@$02M$0A@@glm@@QAE@HHH@Z	; glm::vec<3,float,0>::vec<3,float,0><int,int,int>
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??$rotate@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@MABU?$vec@$02M$0A@@0@@Z ; glm::rotate<float,0>
	add	esp, 16					; 00000010H
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 16   : 
; 17   : 
; 18   : 
; 19   : 
; 20   : 	i = glm::scale(i, glm::vec3(scale));

	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$vec@$02M$0A@@glm@@QAE@M@Z		; glm::vec<3,float,0>::vec<3,float,0>
	push	eax
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$scale@M$0A@@glm@@YA?AU?$mat@$03$03M$0A@@0@ABU10@ABU?$vec@$02M$0A@@0@@Z ; glm::scale<float,0>
	add	esp, 12					; 0000000cH
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd

; 21   : 
; 22   : 	
; 23   : 	
; 24   : 
; 25   : 	return i;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 26   : 
; 27   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@getmatrix
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 912				; 00000390H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@getmatrix:
	DD	1
	DD	$LN4@getmatrix
$LN4@getmatrix:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN3@getmatrix
$LN3@getmatrix:
	DB	105					; 00000069H
	DB	0
?getmatrix@@YA?AU?$mat@$03$03M$0A@@glm@@U?$vec@$02M$0A@@2@0M@Z ENDP ; getmatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 241  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?sqrt@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __C0436A37_cmath
	call	@__CheckForDebuggerJustMyCode@4

; 242  :     return _CSTD sqrtf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 243  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?sqrt@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?sqrt@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?sqrt@@YAMM@Z ENDP					; sqrt
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 233  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?sin@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __C0436A37_cmath
	call	@__CheckForDebuggerJustMyCode@4

; 234  :     return _CSTD sinf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4

; 235  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?sin@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?sin@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?sin@@YAMM@Z ENDP					; sin
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 69   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?cos@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __C0436A37_cmath
	call	@__CheckForDebuggerJustMyCode@4

; 70   :     return _CSTD cosf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4

; 71   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?cos@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?cos@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?cos@@YAMM@Z ENDP					; cos
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __09340588_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]

; 761  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __09340588_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 750  :             return (float)sin(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]

; 751  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __09340588_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 649  :             return (float)cos(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]

; 650  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
END
